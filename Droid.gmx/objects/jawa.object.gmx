<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sjavasdown</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-2000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>oldlad=d_Down;
readyaftershot=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>readyaftershot=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>plx=-1500;
ply=-1500;
if(instance_exists(player)){
    plx=player.x;
    ply=player.y;
}
stx=xstart;
sty=ystart;
d=1000;
dshoot=400;
dx=0;
dy=0;
step=4;

trace(0,alarm[0]);
trace(1,readyaftershot);

delta1=sqrt((plx-x)*(plx-x)+(ply-y)*(ply-y));
delta2=sqrt((stx-x)*(stx-x)+(sty-y)*(sty-y));
delta3=sqrt((stx-plx)*(stx-plx)+(sty-ply)*(sty-ply));

if(readyaftershot){
    if((delta1&lt;dshoot)&amp;&amp;(global.hidden==false)){
        //shoot
        instance_create(x,y-15,blaster);
        readyaftershot=false;
        trace(1,readyaftershot);
        alarm[0]= 2 * room_speed;

    }else{
        if ((delta3&lt;d)&amp;&amp;(global.hidden==false)){
            dx=step*(plx-x)/delta1;
            dy=step*(ply-y)/delta1;
        }else{
            if (delta2&gt;10){
                dx=step*(stx-x)/delta2;
                dy=step*(sty-y)/delta2;
            }
        }
    }
}

if((dx==0)&amp;&amp;(dy==0)){
    switch oldlad
            {
                case d_Up:
                     {
                      sprite_index=sjavasup;break;
                     }
                case d_Down:
                     {
                      sprite_index=sjavasdown;break;     
                     }
                case d_Left:
                     {
                      sprite_index=sjavasleft;break;        
                     }
                case d_Right:
                     {
                      sprite_index=sjavaright;break;        
                     }
                case d_UpLeft:
                     {
                      sprite_index=sjavasleftup;break;
                     }
                case d_UpRight:
                     {
                      sprite_index=sjavasrightup;break;
                     }
                case d_DownRight:
                     {
                      sprite_index=sjavasrightdown;break;
                     }
                case d_DownLeft:
                     {
                      sprite_index=sjavasleftdown;break;
                     }
            }
} else {
    var sinus=dy/step;
    var cosinus=dx/step;
    if(cosinus&gt;0.924){oldlad=d_Right;};
    if((cosinus&lt;=0.924)&amp;&amp;(cosinus&gt;0.383)&amp;&amp;(dy&lt;0)){oldlad=d_UpRight;};
    if((cosinus&lt;=0.924)&amp;&amp;(cosinus&gt;0.383)&amp;&amp;(dy&gt;0)){oldlad=d_DownRight;};
    if((cosinus&lt;=0.383)&amp;&amp;(cosinus&gt;-0.383)&amp;&amp;(dy&lt;0)){oldlad=d_Up;};
    if((cosinus&lt;=0.383)&amp;&amp;(cosinus&gt;-0.383)&amp;&amp;(dy&gt;0)){oldlad=d_Down;};
    if((cosinus&lt;=-0.383)&amp;&amp;(cosinus&gt;-0.924)&amp;&amp;(dy&lt;0)){oldlad=d_UpLeft;};
    if((cosinus&lt;=-0.383)&amp;&amp;(cosinus&gt;-0.924)&amp;&amp;(dy&gt;0)){oldlad=d_DownLeft;};
    if(cosinus&lt;=-0.924){oldlad=d_Left;};
    switch oldlad
            {
                case d_Up:
                     {
                      sprite_index=javasup;break;
                     }
                case d_Down:
                     {
                      sprite_index=javasdown;break;     
                     }
                case d_Left:
                     {
                      sprite_index=javasleft;break;        
                     }
                case d_Right:
                     {
                      sprite_index=javasright;break;        
                     }
                case d_UpLeft:
                     {
                      sprite_index=javasleftup;break;
                     }
                case d_UpRight:
                     {
                      sprite_index=javasrightup;break;
                     }
                case d_DownRight:
                     {
                      sprite_index=javarightdown;break;
                     }
                case d_DownLeft:
                     {
                      sprite_index=javasleftdown;break;
                     }
            }
}


x1=(bbox_right+bbox_left)/2;
y1=(bbox_top+bbox_bottom)/2;
if (place_free(x1+dx,y1+dy)){
    x+=dx;y+=dy;
} else {
    if (place_free(x1+dx,y1)&amp;&amp;!place_free(x1,y1+dy)){
        x+=dx;
    } else {
        if (!place_free(x1+dx,y1)&amp;&amp;place_free(x1,y1+dy)){
        y+=dy;
    }
    }
}
depth=-bbox_bottom;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
