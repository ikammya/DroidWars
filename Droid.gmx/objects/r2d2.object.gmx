<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>r2ups</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>r2ups</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(Joystick)
{
instance_create(0,0,Joystick)
}

lad=-1
oldlad=-1;
global.hidden=false;
image_speed = 0.3;
justhit=false;
r2d2.armor=4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lad=-1
lad=Joystick.lad

lad=GetDirection(lad)
step=6;
sq=step/sqrt(2);
dx=0;
dy=0;

if (armor==0){game_restart();}

switch lad
{
    case -1:
        {
            switch oldlad
            {
                case d_Up:
                     {
                      sprite_index=r2ups;break;
                     }
                case d_Down:
                     {
                      sprite_index=r2downs;break;     
                     }
                case d_Left:
                     {
                      sprite_index=r2lefts;break;        
                     }
                case d_Right:
                     {
                      sprite_index=r2rights;break;        
                     }
                case d_UpLeft:
                     {
                      sprite_index=r2leftups;break;
                     }
                case d_UpRight:
                     {
                      sprite_index=r2rightups;break;
                     }
                case d_DownRight:
                     {
                      sprite_index=r2rightdowns;break;
                     }
                case d_DownLeft:
                     {
                      sprite_index=r2leftdowns;break;
                     }
            }
        break;
        }
    case d_Up:
         {
          if y -step &gt; 0 {dy=-step};sprite_index=r2up;oldlad=lad;break;
         }
    case d_Down:
         {
          if y +step &lt; room_height {dy=step};sprite_index=r2down;oldlad=lad;break;     
         }
    case d_Left:
         {
          if x -step &gt; 0 {dx=-step};sprite_index=r2left;oldlad=lad;break;        
         }
    case d_Right:
         {
          if x +step &lt; room_width {dx=step};sprite_index=r2right;oldlad=lad;break;        
         }
    case d_UpLeft:
         {
          if y -sq &gt; 0&amp;&amp; x-sq&gt;0 {dy =-sq;dx=-sq};sprite_index=r2leftup;oldlad=lad;break;
         }
    case d_UpRight:
         {
          if y -sq &gt; 0&amp;&amp; x+sq&lt;room_width {dy=-sq;dx=sq};sprite_index=r2rightup;oldlad=lad;break;
         }
    case d_DownRight:
         {
          if y+sq&lt;room_height&amp;&amp; x+sq&lt;room_width {dy=sq;dx=sq};sprite_index=r2rightdown;oldlad=lad;break;
         }
    case d_DownLeft:
         {
          if y+sq&lt;room_height&amp;&amp;  x-sq&gt;0 {dy=sq;dx=-sq};sprite_index=r2leftdown;oldlad=lad;break;
         }
}
if (!justhit){
    x1=(bbox_right+bbox_left)/2;
    y1=(bbox_top+bbox_bottom)/2;
    if (place_free(x1+dx,y1+dy)){
        x+=dx;y+=dy;
    } else {
        if (place_free(x1+dx,y1)&amp;&amp;!place_free(x1,y1+dy)){
            x+=dx;
        } else {
            if (!place_free(x1+dx,y1)&amp;&amp;place_free(x1,y1+dy)){
            y+=dy;
        }
        }
    }
}
depth=-bbox_bottom;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var sprite1 = hpsprite;
switch r2d2.armor
{
    case 4:
        {
            break;
        }
    case 3:
        {
            var sprite1 = hpsprite2;break;
        }
    case 2:
        {
            var sprite1 = hpsprite3;break;
        }
    case 1:
        {
            var sprite1 = hpsprite4;break;
        }
}
draw_sprite(sprite1, 0, view_xview[view_current]+10, view_yview[view_current]+300);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
